name: Build Binaries

on:
  push:
    tags:
      - "v*"

jobs:

  build_x64_native:
    name: ${{ matrix.os }} Binaries
    runs-on: ${{ matrix.os }}-latest
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Install Dependencies
        run: |
          npm install

      - name: Build Code
        run: |
          npm run build

      - name: Compile x64 binary
        id: compile
        run: |
          node ./scripts/copy-node-bindings-path.js
          npm run compile

      - name: Package binary
        run: |
          mkdir dungeon-revealer-${{ matrix.os }}
          mv ./bin/dungeon-revealer* ./dungeon-revealer-${{ matrix.os }}/
          mv ./node_sqlite3.node ./dungeon-revealer-${{ matrix.os }}/
          mv ./LICENSE ./dungeon-revealer-${{ matrix.os }}/
          mv ./README.md ./dungeon-revealer-${{ matrix.os }}/

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dungeon-revealer-${{ matrix.os }}
          path: "dungeon-revealer-${{ matrix.os }}/"


  build_arm:
    name: ${{ matrix.arch }} Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/arm/v7, linux/arm64/v8 ]
        include:
          - platform: linux/arm/v7
            arch: armv7
          - platform: linux/arm64/v8
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          buildx-version: latest
          qemu-version: latest

      - name: Build ${{ matrix.arch }}
        run: |
          docker buildx build -f arm-compile.Dockerfile --platform ${{ matrix.platform }} \
          --build-arg ARCH=${{ matrix.arch }} \
          --build-arg FETCH_CMD="mkdir -p ~/.pkg-cache/v2.5 && cd ~/.pkg-cache/v2.5 && wget https://github.com/robertsLando/pkg-binaries/releases/download/v1.0.0/fetched-v10.15.3-linux-${{ matrix.arch }} -O fetched-v10.4.1-linux-${{ matrix.arch }}" \
          --load -t dr/bin:${{ matrix.arch }} .
          APP=$(docker run --rm -it -d dr/bin:${{ matrix.arch }})
          docker cp $APP:/usr/src/build/bin/dungeon-revealer-linux ./bin/
          docker cp $APP:/usr/src/build/node_sqlite3.node ./bin/
          docker kill $APP

      - name: Package binary
        run: |
          mkdir dungeon-revealer-linux-${{ matrix.arch }}
          mv ./bin/dungeon-revealer-linux ./dungeon-revealer-linux-${{ matrix.arch }}/dungeon-revealer-linux-${{ matrix.arch }}
          mv ./bin/node_sqlite3.node ./dungeon-revealer-linux-${{ matrix.arch }}/
          mv ./LICENSE ./dungeon-revealer-linux-${{ matrix.arch }}/
          mv ./README.md ./dungeon-revealer-linux-${{ matrix.arch }}/

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dungeon-revealer-linux-${{ matrix.arch }}
          path: "dungeon-revealer-linux-${{ matrix.arch }}/"

  job_upload:
    name: Upload Release Assets
    needs: [build_x64_native, build_arm]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Set environment
        run: |
          node ./scripts/set-git-tag-env.js

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - uses: actions/download-artifact@v2
        with:
          path: bin/

      # Zip all artifacts
      - name: Zip Archives
        run: |
          cd bin
          chmod +x ./dungeon-revealer-macos/dungeon-revealer-macos
          chmod +x ./dungeon-revealer-ubuntu/dungeon-revealer-linux
          chmod +x ./dungeon-revealer-linux-armv7/dungeon-revealer-linux-armv7
          chmod +x ./dungeon-revealer-linux-arm64/dungeon-revealer-linux-arm64
          for idir in */;
          do
            (cd "$idir"; rm dungeon-revealer || true; zip -r "../${idir%/}.zip" .);
          done

      # We have to upload assets individually using upload-release-asset@v1
      # There isn't a matrix for steps.
      - name: Upload Linux Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./bin/dungeon-revealer-ubuntu.zip
          asset_name: dungeon-revealer-linux-${{ env.GH_TAG }}.zip
          asset_content_type: application/zip

      - name: Upload MacOS Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./bin/dungeon-revealer-macos.zip
          asset_name: dungeon-revealer-macos-${{ env.GH_TAG }}.zip
          asset_content_type: application/zip

      - name: Upload Windows Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./bin/dungeon-revealer-windows.zip
          asset_name: dungeon-revealer-windows-${{ env.GH_TAG }}.zip
          asset_content_type: application/zip

      - name: Upload Linux armv7 Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./bin/dungeon-revealer-linux-armv7.zip
          asset_name: dungeon-revealer-linux-armv7-${{ env.GH_TAG }}.zip
          asset_content_type: application/zip

      - name: Upload Linux arm64 Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./bin/dungeon-revealer-linux-arm64.zip
          asset_name: dungeon-revealer-linux-arm64-${{ env.GH_TAG }}.zip
          asset_content_type: application/zip
